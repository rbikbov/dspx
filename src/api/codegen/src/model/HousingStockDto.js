/**
 * DISPEX API Test - V3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HousingStockDto model module.
 * @module model/HousingStockDto
 * @version 3.0
 */
class HousingStockDto {
    /**
     * Constructs a new <code>HousingStockDto</code>.
     * @alias module:model/HousingStockDto
     */
    constructor() { 
        
        HousingStockDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HousingStockDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HousingStockDto} obj Optional instance to populate.
     * @return {module:model/HousingStockDto} The populated <code>HousingStockDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HousingStockDto();

            if (data.hasOwnProperty('addressId')) {
                obj['addressId'] = ApiClient.convertToType(data['addressId'], 'Number');
            }
            if (data.hasOwnProperty('streetId')) {
                obj['streetId'] = ApiClient.convertToType(data['streetId'], 'Number');
            }
            if (data.hasOwnProperty('houseId')) {
                obj['houseId'] = ApiClient.convertToType(data['houseId'], 'Number');
            }
            if (data.hasOwnProperty('streetName')) {
                obj['streetName'] = ApiClient.convertToType(data['streetName'], 'String');
            }
            if (data.hasOwnProperty('building')) {
                obj['building'] = ApiClient.convertToType(data['building'], 'String');
            }
            if (data.hasOwnProperty('corpus')) {
                obj['corpus'] = ApiClient.convertToType(data['corpus'], 'String');
            }
            if (data.hasOwnProperty('flat')) {
                obj['flat'] = ApiClient.convertToType(data['flat'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HousingStockDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HousingStockDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['streetName'] && !(typeof data['streetName'] === 'string' || data['streetName'] instanceof String)) {
            throw new Error("Expected the field `streetName` to be a primitive type in the JSON string but got " + data['streetName']);
        }
        // ensure the json data is a string
        if (data['building'] && !(typeof data['building'] === 'string' || data['building'] instanceof String)) {
            throw new Error("Expected the field `building` to be a primitive type in the JSON string but got " + data['building']);
        }
        // ensure the json data is a string
        if (data['corpus'] && !(typeof data['corpus'] === 'string' || data['corpus'] instanceof String)) {
            throw new Error("Expected the field `corpus` to be a primitive type in the JSON string but got " + data['corpus']);
        }
        // ensure the json data is a string
        if (data['flat'] && !(typeof data['flat'] === 'string' || data['flat'] instanceof String)) {
            throw new Error("Expected the field `flat` to be a primitive type in the JSON string but got " + data['flat']);
        }

        return true;
    }


}



/**
 * @member {Number} addressId
 */
HousingStockDto.prototype['addressId'] = undefined;

/**
 * @member {Number} streetId
 */
HousingStockDto.prototype['streetId'] = undefined;

/**
 * @member {Number} houseId
 */
HousingStockDto.prototype['houseId'] = undefined;

/**
 * @member {String} streetName
 */
HousingStockDto.prototype['streetName'] = undefined;

/**
 * @member {String} building
 */
HousingStockDto.prototype['building'] = undefined;

/**
 * @member {String} corpus
 */
HousingStockDto.prototype['corpus'] = undefined;

/**
 * @member {String} flat
 */
HousingStockDto.prototype['flat'] = undefined;






export default HousingStockDto;

